<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:cls="clr-namespace:vMixController.Classes"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:c="clr-namespace:vMixController.Converters"
        xmlns:ctrls="clr-namespace:vMixController.Controls"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        xmlns:e="clr-namespace:vMixController.Extensions"
        xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
        xmlns:cmd="clr-namespace:GalaSoft.MvvmLight.Command;assembly=GalaSoft.MvvmLight.Platform"
        xmlns:ext="clr-namespace:vMixController.Extensions"
        xmlns:skin="clr-namespace:vMixControllerSkin;assembly=vMixControllerSkin"
        xmlns:toolkit="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:wpfc="clr-namespace:NKristek.Wpf.Converters;assembly=NKristek.Wpf.Converters"
        xmlns:widget="clr-namespace:vMixController.Widgets"
        xmlns:diag="clr-namespace:System.Diagnostics;assembly=WindowsBase"
        mc:Ignorable="d">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/vMixControllerSkin;component/MainSkin.xaml"/>
    </ResourceDictionary.MergedDictionaries>


    <c:AudiobusToBoolConverter x:Key="AudioBussesConverter"/>

    <ControlTemplate x:Key="MoveThumbTemplate" TargetType="{x:Type ctrls:vMixControlMoveThumb}">
        <Rectangle Fill="Transparent"/>
    </ControlTemplate>
    <ControlTemplate x:Key="ResizeThumbTemplate" TargetType="{x:Type ctrls:vMixControlResizeThumb}">
        <Rectangle Fill="Red"/>
    </ControlTemplate>
    <Style TargetType="{x:Type ctrls:vMixControlResizeThumb}">
        <Style.Triggers>
            <Trigger Property="HorizontalAlignment" Value="Right">
                <Setter Property="Margin" Value="4,0,-4,0"/>
            </Trigger>
            <Trigger Property="HorizontalAlignment" Value="Left">
                <Setter Property="Margin" Value="-4,0,4,0"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Storyboard x:Key="BlinkAnimation" x:Shared="false">
        <ColorAnimationUsingKeyFrames Storyboard.TargetName="stateDep" Storyboard.TargetProperty="(Ellipse.Fill).(SolidColorBrush.Color)"
                                                      Duration="0:0:2"
                                                      FillBehavior="HoldEnd"
                                                      RepeatBehavior="Forever">
            <ColorAnimationUsingKeyFrames.KeyFrames>
                <EasingColorKeyFrame KeyTime="0:0:0" Value="Red"/>
                <EasingColorKeyFrame KeyTime="0:0:1" Value="#400000"/>
                <EasingColorKeyFrame KeyTime="0:0:2" Value="Red"/>
            </ColorAnimationUsingKeyFrames.KeyFrames>
        </ColorAnimationUsingKeyFrames>
    </Storyboard>

    <!--Inner Controls-->
    <Grid Margin="{StaticResource StdMargin}" x:Shared="false" x:Key="PlayListWidgetControl" d:DataContext="{d:DesignInstance widget:vMixControlPlaylist}">
        <Grid.RowDefinitions>
            <RowDefinition/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <ListView DataContext="{Binding}" Background="Transparent" BorderThickness="0" ItemsSource="{Binding Items}" SelectedIndex="{Binding SelectedIndex}" HorizontalContentAlignment="Stretch" x:Name="Me" ScrollViewer.HorizontalScrollBarVisibility="Disabled">
            <ListView.ItemTemplate>
                <DataTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <StackPanel VerticalAlignment="Center" Grid.Column="1" Margin="2,0,0,0" Orientation="Horizontal" HorizontalAlignment="Right">
                            <Button Style="{StaticResource TitleButton}" HorizontalAlignment="Left" Command="{Binding DataContext.RemoveItemCommand, RelativeSource={RelativeSource AncestorType=ListView}}" CommandParameter="{Binding}" Content="&#xF374;" IsEnabled="{Binding DataContext.Locked, RelativeSource={RelativeSource AncestorType=ListView}, Converter={wpfc:BoolToInverseBoolConverter}}"/>
                        </StackPanel>
                        <TextBlock TextTrimming="CharacterEllipsis" Style="{StaticResource CaptionText}" Text="{Binding}"/>
                    </Grid>
                </DataTemplate>
            </ListView.ItemTemplate>
            <ListView.ItemContainerStyle>
                <Style TargetType="ListViewItem">
                    <Setter Property="Margin" Value="0,1,0,1"/>
                </Style>
            </ListView.ItemContainerStyle>
        </ListView>
        <Button Grid.Row="1" Width="Auto" Margin="2,0" Style="{StaticResource TitleButton}" Command="{Binding AddItemCommand}" Content="{e:Localize Append Item}" IsEnabled="{Binding Locked, Converter={wpfc:BoolToInverseBoolConverter}}"/>
        <Border Grid.Row="2" BorderBrush="White" BorderThickness="0,1" Margin="0,2"/>
        <Grid Grid.Row="3">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition/>
                <ColumnDefinition/>
                <ColumnDefinition/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Button Width="Auto" Margin="2,0" Style="{StaticResource TitleButton}" Command="{Binding PrevItemCommand}" ToolTip="{e:Localize Previous}">
                <TextBlock>
                    <Run FontFamily="/vMixControllerSkin;Component/#FontAwesome" Text="&#xF048;"/>
                </TextBlock>
            </Button>
            <Button Width="Auto" Grid.Column="1" Margin="2,0" Style="{StaticResource TitleButton}" Command="{Binding ShuffleCommand}" ToolTip="{e:Localize Shuffle}">
                <TextBlock>
                    <Run FontFamily="/vMixControllerSkin;Component/#FontAwesome" Text="&#xF074;"/>
                </TextBlock>
            </Button>
            <Button Width="Auto" Grid.Column="2" Margin="2,0" Style="{StaticResource TitleButton}" Command="{Binding PlayOutCommand}" ToolTip="{e:Localize Play Out}">
                <TextBlock>
                    <Run FontFamily="/vMixControllerSkin;Component/#FontAwesome" Text="&#xF04E;"/>
                </TextBlock>
            </Button>
            <Button Width="Auto" Grid.Column="3" Margin="2,0" Style="{StaticResource TitleButton}" Command="{Binding PlayCommand}" ToolTip="{e:Localize Play/Pause}">
                <TextBlock>
                    <Run FontFamily="/vMixControllerSkin;Component/#FontAwesome" Text="&#xF04B;"/> / <Run FontFamily="/vMixControllerSkin;Component/#FontAwesome" Text="&#xF04C;"/>
                </TextBlock>
            </Button>
            <Button Width="Auto" Grid.Column="4" Margin="2,0" Style="{StaticResource TitleButton}" Command="{Binding NextItemCommand}" ToolTip="{e:Localize Next}">
                <TextBlock>
                    <Run FontFamily="/vMixControllerSkin;Component/#FontAwesome" Text="&#xF051;"/>
                </TextBlock>
            </Button>
        </Grid>
    </Grid>


    <Button ClickMode="Release" Tag="{Binding IsColorized}" HorizontalContentAlignment="Stretch" x:Shared="false" x:Key="ButtonWidgetControl" Margin="{StaticResource StdMargin}" IsEnabled="{Binding Enabled}" Grid.Column="1" DataContext="{Binding}" d:DataContext="{d:DesignInstance widget:vMixControlButton}">
        <i:Interaction.Triggers>
            <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                <cmd:EventToCommand Command="{Binding ExecutePushOn}" PassEventArgsToCommand="True"/>
            </i:EventTrigger>
            <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                <cmd:EventToCommand Command="{Binding ExecutePushOff}" PassEventArgsToCommand="True"/>
            </i:EventTrigger>
            <i:EventTrigger EventName="TouchDown">
                <cmd:EventToCommand Command="{Binding ExecutePushOn}" PassEventArgsToCommand="True"/>
            </i:EventTrigger>
            <i:EventTrigger EventName="TouchUp">
                <cmd:EventToCommand Command="{Binding ExecutePushOff}" PassEventArgsToCommand="True"/>
            </i:EventTrigger>
        </i:Interaction.Triggers>

        <Button.Template>
            <ControlTemplate>
                <Button Width="Auto" Height="Auto" HorizontalContentAlignment="{TemplateBinding HorizontalAlignment}" Tag="{TemplateBinding Tag}" IsEnabled="{TemplateBinding IsEnabled}">
                    <Grid>
                        <Grid.Resources>
                            <Image x:Key="IMG">
                                <Image.Source>
                                    <MultiBinding Converter="{c:ImagePartConverter}">
                                        <Binding Path="Image"/>
                                        <Binding Path="ImageMax"/>
                                        <Binding Path="ImageNumber"/>
                                    </MultiBinding>
                                </Image.Source>
                            </Image>
                        </Grid.Resources>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Border Grid.Column="0" Margin="{StaticResource LeftStdMargin}" Visibility="{Binding ImageMax, Converter={wpfc:ObjectToStringEqualsParameterToVisibilityConverter}, ConverterParameter=1}">
                            <!--{Binding Active, Converter={c:BoolToSolidColorBrushConverter}}-->
                            <Ellipse x:Name="stateDep" Visibility="{Binding IsStateDependent, Converter={wpfc:BoolToVisibilityConverter}}" Fill="SlateGray" Width="8" Height="8">
                            </Ellipse>
                        </Border>
                        <TextBlock Foreground="{Binding Background.Color, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}, Converter={c:ColorToBlackOrWhiteConverter}}" HorizontalAlignment="Center" Grid.Column="1" Text="{Binding Name}" Visibility="{Binding Image, Converter={c:ImagePathToVisibilityConverter}, ConverterParameter=true}"/>
                        <Grid Grid.Column="1" Visibility="{Binding Image, Converter={c:ImagePathToVisibilityConverter}}">
                            <ContentControl Content="{StaticResource IMG}"/>
                            <Viewbox Stretch="Uniform" Height="{Binding ActualHeight, Source={StaticResource IMG}}">
                                <TextBlock Foreground="{Binding Source, Source={StaticResource IMG}, Converter={c:ColorToBlackOrWhiteConverter}}" HorizontalAlignment="Center" Text="{Binding Name}"/>
                            </Viewbox>
                        </Grid>
                    </Grid>
                    <Button.Style>
                        <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                            <Style.Setters>
                                <Setter Property="DataContext" Value="{Binding}"/>
                            </Style.Setters>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Image, Converter={wpfc:ValueNullToBoolConverter}}" Value="False">
                                    <Setter Property="Height" Value="Auto"/>
                                </DataTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="Tag">
                                            <Condition.Value>
                                                <sys:Boolean>True</sys:Boolean>
                                            </Condition.Value>
                                        </Condition>
                                        <Condition Property="IsMouseOver" Value="False"/>
                                    </MultiTrigger.Conditions>
                                    <MultiTrigger.Setters>
                                        <Setter Property="Background" Value="{Binding Color, Converter={c:ColorToSolidBrushConverter}}"/>
                                        <Setter Property="BorderBrush" Value="{Binding BorderColor, Converter={c:ColorToSolidBrushConverter}}"/>
                                    </MultiTrigger.Setters>
                                </MultiTrigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="Tag">
                                            <Condition.Value>
                                                <sys:Boolean>True</sys:Boolean>
                                            </Condition.Value>
                                        </Condition>
                                        <Condition Property="IsMouseOver" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <MultiTrigger.Setters>
                                        <Setter Property="Background" Value="{Binding BorderColor, Converter={c:ColorToSolidBrushConverter}}"/>
                                        <Setter Property="BorderBrush" Value="{Binding Color, Converter={c:ColorToSolidBrushConverter}}"/>
                                    </MultiTrigger.Setters>
                                </MultiTrigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="Tag">
                                            <Condition.Value>
                                                <sys:Boolean>True</sys:Boolean>
                                            </Condition.Value>
                                        </Condition>
                                        <Condition Property="IsPressed" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <MultiTrigger.Setters>
                                        <Setter Property="Background" Value="{Binding BorderColor, Converter={c:ColorToDarkerSolidBrushConverter}}"/>
                                        <Setter Property="BorderBrush" Value="{Binding Color, Converter={c:ColorToDarkerSolidBrushConverter}}"/>
                                    </MultiTrigger.Setters>
                                </MultiTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
                <ControlTemplate.Triggers>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Active}" Value="True"/>
                            <Condition Binding="{Binding Main.WindowSettings.BlinkLights, Source={StaticResource Locator}}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="stateDep" Property="Fill" Value="Red"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Active}" Value="False"/>
                            <Condition Binding="{Binding Main.WindowSettings.BlinkLights, Source={StaticResource Locator}}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="stateDep" Property="Fill" Value="SlateGray"/>
                    </MultiDataTrigger>
                    <DataTrigger Value="True">
                        <DataTrigger.Binding>
                            <MultiBinding Mode="OneWay" Converter="{wpfc:AllBoolToBoolConverter}">
                                <Binding Path="Active"/>
                                <Binding Path="Main.WindowSettings.BlinkLights" Source="{StaticResource Locator}"/>
                            </MultiBinding>
                        </DataTrigger.Binding>
                        <DataTrigger.EnterActions>
                            <BeginStoryboard Name="blinker" Storyboard="{StaticResource BlinkAnimation}"/>
                        </DataTrigger.EnterActions>
                        <DataTrigger.ExitActions>
                            <RemoveStoryboard BeginStoryboardName="blinker"/>
                        </DataTrigger.ExitActions>
                    </DataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Button.Template>
    </Button>

    <Grid x:Shared="false" x:Key="TextFieldWidgetControl" Margin="{StaticResource StdMargin}" Grid.Column="1" d:DataContext="{d:DesignInstance widget:vMixControlTextField}">
        <Grid.ColumnDefinitions>
            <ColumnDefinition/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <!--Background="{Binding Color, Converter={c:ColorToSolidBrushConverter}}"-->
        <TextBox IsEnabled="{Binding IsEditable}" Style="{StaticResource WidgetTextBox}" Text="{Binding Text, UpdateSourceTrigger=PropertyChanged}" ext:FocusExtension.IsFocused="{Binding IsFocused}" Foreground="{Binding Background.Color, RelativeSource={RelativeSource Self}, Converter={c:ColorToBlackOrWhiteConverter}}">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewKeyUp">
                    <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding PreviewKeyUp}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="GotFocus">
                    <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding GotFocus}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="LostFocus">
                    <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding LostFocus}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>
        </TextBox>
        <Button Grid.Column="2" Style="{StaticResource TitleButton}" Command="{Binding SelectPathCommand}" Content="..." Visibility="{Binding Template, Converter={wpfc:BoolToVisibilityConverter}}">
            <Button.ToolTip>
                <ToolTip Visibility="{Binding Text, Converter={c:ImagePathToVisibilityConverter}}">
                    <Image Width="128" Height="128" Source="{Binding Text}"></Image>
                </ToolTip>
            </Button.ToolTip>
        </Button>
    </Grid>

    <Grid x:Shared="false" x:Key="TBarWidgetControl" Margin="{StaticResource StdMargin}" Grid.Column="1" d:DataContext="{d:DesignInstance widget:vMixControlTBar}">
        <ContentPresenter Content="{Binding}">
            <ContentPresenter.ContentTemplate>
                <DataTemplate>
                    <ctrls:TBarSlider TickPlacement="Both" Ticks="0, 128, 255" Grid.Column="1" x:Name="Bar" Minimum="0" Maximum="255" Value="{Binding Value}" HorizontalAlignment="Stretch" VerticalAlignment="Center" Style="{StaticResource {x:Type Slider}}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="ValueChanged">
                                <cmd:EventToCommand Command="{Binding ValueChangedCommand}" PassEventArgsToCommand="True"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </ctrls:TBarSlider>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding Style}" Value="Horizontal">

                        </DataTrigger>
                        <DataTrigger Binding="{Binding Style}" Value="Vertical">
                            <Setter Property="Orientation" TargetName="Bar" Value="Vertical"/>
                            <Setter Property="HorizontalAlignment" TargetName="Bar" Value="Center"/>
                            <Setter Property="VerticalAlignment" TargetName="Bar" Value="Stretch"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </ContentPresenter.ContentTemplate>
        </ContentPresenter>
    </Grid>

    <Grid x:Shared="false" x:Key="VolumeWidgetControl" Margin="{StaticResource StdMargin}" Grid.Column="1" d:DataContext="{d:DesignInstance widget:vMixControlVolume}">
        <ContentPresenter Content="{Binding}">
            <ContentPresenter.ContentTemplate>
                <DataTemplate>
                    <StackPanel x:Name="Stack" Orientation="Vertical" HorizontalAlignment="Stretch" VerticalAlignment="Center">
                        <StackPanel x:Name="Busses" Orientation="Horizontal">
                            <StackPanel.Resources>
                                <Style TargetType="CheckBox">
                                    <Style.Setters>
                                        <Setter Property="Foreground" Value="White"/>
                                        <Setter Property="Background" Value="#D01818"/>
                                        <Setter Property="BorderBrush" Value="#8B0000"/>
                                        <Setter Property="BorderThickness" Value="1"/>
                                        <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                                        <Setter Property="Margin" Value="{StaticResource StdMargin}"/>
                                        <Setter Property="FontWeight" Value="Normal"/>
                                        <Setter Property="LayoutTransform" Value="{Binding Path=LayoutTransform, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=StackPanel}}"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="CheckBox">
                                                    <Border Width="16" Height="16" Background="{TemplateBinding Background}">
                                                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsChecked" Value="True">
                                                            <Setter Property="Background" Value="#189618"/>
                                                            <Setter Property="BorderBrush" Value="#006400"/>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style.Setters>
                                </Style>
                            </StackPanel.Resources>


                            <CheckBox IsChecked="{Binding IsMuted, Mode=TwoWay, Converter={wpfc:BoolToInverseBoolConverter}}" Tag="Mute" Content="&#xf028;" FontFamily="/vMixControllerSkin;Component/#FontAwesome">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="Click">
                                        <cmd:EventToCommand Command="{Binding UpdateBusses}" PassEventArgsToCommand="True"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </CheckBox>

                            <CheckBox x:Name="BusM" Visibility="Collapsed" Content="M" Tag="M" IsChecked="{Binding AudioBusses, Converter={c:AudiobusToBoolConverter}, ConverterParameter=M, Mode=OneWay}">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="Click">
                                        <cmd:EventToCommand Command="{Binding UpdateBusses}" PassEventArgsToCommand="True"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </CheckBox>
                            <CheckBox x:Name="BusA" Visibility="Collapsed" Content="A" Tag="A" IsChecked="{Binding AudioBusses, Converter={c:AudiobusToBoolConverter}, ConverterParameter=A, Mode=OneWay}">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="Click">
                                        <cmd:EventToCommand Command="{Binding UpdateBusses}" PassEventArgsToCommand="True"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </CheckBox>
                            <CheckBox x:Name="BusB" Visibility="Collapsed" Content="B" Tag="B" IsChecked="{Binding AudioBusses, Converter={c:AudiobusToBoolConverter}, ConverterParameter=B, Mode=OneWay}">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="Click">
                                        <cmd:EventToCommand Command="{Binding UpdateBusses}" PassEventArgsToCommand="True"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </CheckBox>
                            <CheckBox x:Name="BusC" Visibility="Collapsed" Content="C" Tag="C" IsChecked="{Binding AudioBusses, Converter={c:AudiobusToBoolConverter}, ConverterParameter=C, Mode=OneWay}">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="Click">
                                        <cmd:EventToCommand Command="{Binding UpdateBusses}" PassEventArgsToCommand="True"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </CheckBox>
                            <CheckBox x:Name="BusD" Visibility="Collapsed" Content="D" Tag="D" IsChecked="{Binding AudioBusses, Converter={c:AudiobusToBoolConverter}, ConverterParameter=D, Mode=OneWay}">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="Click">
                                        <cmd:EventToCommand Command="{Binding UpdateBusses}" PassEventArgsToCommand="True"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </CheckBox>
                            <CheckBox x:Name="BusE" Visibility="Collapsed" Content="E" Tag="E" IsChecked="{Binding AudioBusses, Converter={c:AudiobusToBoolConverter}, ConverterParameter=E, Mode=OneWay}">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="Click">
                                        <cmd:EventToCommand Command="{Binding UpdateBusses}" PassEventArgsToCommand="True"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </CheckBox>
                            <CheckBox x:Name="BusF" Visibility="Collapsed" Content="F" Tag="F" IsChecked="{Binding AudioBusses, Converter={c:AudiobusToBoolConverter}, ConverterParameter=F, Mode=OneWay}">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="Click">
                                        <cmd:EventToCommand Command="{Binding UpdateBusses}" PassEventArgsToCommand="True"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </CheckBox>
                            <CheckBox x:Name="BusG" Visibility="Collapsed" Content="G" Tag="G" IsChecked="{Binding AudioBusses, Converter={c:AudiobusToBoolConverter}, ConverterParameter=G, Mode=OneWay}">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="Click">
                                        <cmd:EventToCommand Command="{Binding UpdateBusses}" PassEventArgsToCommand="True"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </CheckBox>
                        </StackPanel>
                        <ctrls:VolumeSlider Style="{DynamicResource {x:Type Slider}}" Visibility="{Binding ShowSlider, Converter={wpfc:BoolToVisibilityConverter}}" TickPlacement="Both" Ticks="0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100" Minimum="0" Maximum="100" LargeChange="0.01" SmallChange="0.001" x:Name="Slider" Value="{Binding Value, UpdateSourceTrigger=PropertyChanged, Converter={c:LogarithmicConverter}}" ext:FocusExtension.IsFocused="{Binding IsFocused}" e:ThumbColorizer.Color="Red">

                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="PreviewKeyUp">
                                    <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding PreviewKeyUp}"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="GotFocus">
                                    <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding GotFocus}"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="LostFocus">
                                    <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding LostFocus}"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="ThumbDragStarted">
                                    <cmd:EventToCommand Command="{Binding DragStarted}"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="ThumbDragCompleted">
                                    <cmd:EventToCommand Command="{Binding DragCompleted}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </ctrls:VolumeSlider>
                        <!--Left-->
                        <Border x:Name="Border" HorizontalAlignment="Stretch" Margin="1" Visibility="{Binding ShowMeters, Converter={wpfc:BoolToVisibilityConverter}}">
                            <Border.Tag>
                                <PointCollection>
                                    <Point X="0" Y="0"/>
                                    <Point X="1" Y="0"/>
                                </PointCollection>
                            </Border.Tag>
                            <Border.OpacityMask>
                                <LinearGradientBrush x:Name="OpacityBrush" EndPoint="{Binding Tag[1], ElementName=Border}" StartPoint="{Binding Tag[0], ElementName=Border}">
                                    <GradientStop Color="White" Offset="0"/>
                                    <GradientStop Color="White" Offset="{Binding F1}"/>
                                    <GradientStop Color="Transparent" Offset="{Binding F1}"/>
                                </LinearGradientBrush>
                            </Border.OpacityMask>
                            <Border.Background>
                                <LinearGradientBrush x:Name="GradientBrush" EndPoint="{Binding Tag[1], ElementName=Border}" StartPoint="{Binding Tag[0], ElementName=Border}">
                                    <GradientStop Color="Green"/>
                                    <GradientStop Color="Lime" Offset="0.8"/>
                                    <GradientStop Color="Yellow" Offset="0.85"/>
                                    <GradientStop Color="Yellow" Offset="0.95"/>
                                    <GradientStop Color="Red" Offset="0.98"/>
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>
                        <!--Right-->
                        <Border x:Name="Border1" HorizontalAlignment="Stretch" Margin="1" Visibility="{Binding ShowMeters, Converter={wpfc:BoolToVisibilityConverter}}">
                            <Border.Tag>
                                <PointCollection>
                                    <Point X="0" Y="0"/>
                                    <Point X="1" Y="0"/>
                                </PointCollection>
                            </Border.Tag>
                            <Border.OpacityMask>
                                <LinearGradientBrush EndPoint="{Binding Tag[1], ElementName=Border}" StartPoint="{Binding Tag[0], ElementName=Border}">
                                    <GradientStop Color="White" Offset="0"/>
                                    <GradientStop Color="White" Offset="{Binding F2}"/>
                                    <GradientStop Color="Transparent" Offset="{Binding F2}"/>
                                </LinearGradientBrush>
                            </Border.OpacityMask>
                            <Border.Background>
                                <LinearGradientBrush EndPoint="{Binding Tag[1], ElementName=Border}" StartPoint="{Binding Tag[0], ElementName=Border}">
                                    <GradientStop Color="Green"/>
                                    <GradientStop Color="Lime" Offset="0.8"/>
                                    <GradientStop Color="Yellow" Offset="0.85"/>
                                    <GradientStop Color="Yellow" Offset="0.95"/>
                                    <GradientStop Color="Red" Offset="0.98"/>
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>
                    </StackPanel>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding Style}" Value="Horizontal">
                            <Setter TargetName="Border" Property="Height" Value="5"/>
                            <Setter TargetName="Border1" Property="Height" Value="5"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Style}" Value="Vertical">
                            <Setter TargetName="Busses" Property="VerticalAlignment" Value="Bottom"/>
                            <Setter TargetName="Busses" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="180"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="Stack" Property="Orientation" Value="Horizontal"/>
                            <Setter TargetName="Busses" Property="Orientation" Value="Vertical"/>
                            <Setter TargetName="Border" Property="VerticalAlignment" Value="Stretch"/>
                            <Setter TargetName="Border" Property="Width" Value="5"/>
                            <Setter TargetName="Border" Property="Tag">
                                <Setter.Value>
                                    <PointCollection>
                                        <Point X="0" Y="1"/>
                                        <Point X="0" Y="0"/>
                                    </PointCollection>
                                </Setter.Value>
                            </Setter>

                            <Setter TargetName="Border1" Property="VerticalAlignment" Value="Stretch"/>
                            <Setter TargetName="Border1" Property="Width" Value="5"/>
                            <Setter TargetName="Border1" Property="Tag">
                                <Setter.Value>
                                    <PointCollection>
                                        <Point X="0" Y="1"/>
                                        <Point X="0" Y="0"/>
                                    </PointCollection>
                                </Setter.Value>
                            </Setter>

                            <Setter TargetName="Slider" Property="Orientation" Value="Vertical"/>
                            <Setter TargetName="Stack" Property="HorizontalAlignment" Value="Center"/>
                            <Setter TargetName="Stack" Property="VerticalAlignment" Value="Stretch"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Target}" Value="Input">
                            <Setter TargetName="BusM" Property="Visibility" Value="{Binding State.Audio, Converter={c:AudiobusToVisibilityConverter}, ConverterParameter=Master}"/>
                            <Setter TargetName="BusA" Property="Visibility" Value="{Binding State.Audio, Converter={c:AudiobusToVisibilityConverter}, ConverterParameter=BusA}"/>
                            <Setter TargetName="BusB" Property="Visibility" Value="{Binding State.Audio, Converter={c:AudiobusToVisibilityConverter}, ConverterParameter=BusB}"/>
                            <Setter TargetName="BusC" Property="Visibility" Value="{Binding State.Audio, Converter={c:AudiobusToVisibilityConverter}, ConverterParameter=BusC}"/>
                            <Setter TargetName="BusD" Property="Visibility" Value="{Binding State.Audio, Converter={c:AudiobusToVisibilityConverter}, ConverterParameter=BusD}"/>
                            <Setter TargetName="BusE" Property="Visibility" Value="{Binding State.Audio, Converter={c:AudiobusToVisibilityConverter}, ConverterParameter=BusE}"/>
                            <Setter TargetName="BusF" Property="Visibility" Value="{Binding State.Audio, Converter={c:AudiobusToVisibilityConverter}, ConverterParameter=BusF}"/>
                            <Setter TargetName="BusG" Property="Visibility" Value="{Binding State.Audio, Converter={c:AudiobusToVisibilityConverter}, ConverterParameter=BusG}"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </ContentPresenter.ContentTemplate>
        </ContentPresenter>
    </Grid>

    <ctrls:ComboBox Style="{DynamicResource {x:Type ComboBox}}" IsEditable="{Binding IsEditable}" HorizontalContentAlignment="Stretch" x:Shared="false" x:Key="ListWidgetControl" Margin="{StaticResource StdMargin}" ItemsSource="{Binding Items}" Grid.Column="1" Text="{Binding Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ext:FocusExtension.IsFocused="{Binding IsFocused}" d:DataContext="{d:DesignInstance widget:vMixControlList}">
        <ctrls:ComboBox.ItemTemplate>
            <DataTemplate>
                <Grid HorizontalAlignment="Stretch">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <TextBlock Visibility="{Binding Converter={c:ListItemTagToVisibilityConverter}}" VerticalAlignment="Stretch" HorizontalAlignment="Right" Foreground="DarkGreen" Text="{Binding Converter={c:ListItemTagConverter}, ConverterParameter=tag}" TextTrimming="CharacterEllipsis"/>
                    <TextBlock Margin="{Binding Converter={c:ListItemTagToThicknessConverter}}" Grid.Row="1" Text="{Binding Converter={c:ListItemTagConverter}}" TextTrimming="CharacterEllipsis"/>
                </Grid>
            </DataTemplate>
        </ctrls:ComboBox.ItemTemplate>
        <i:Interaction.Triggers>
            <i:EventTrigger EventName="PreviewKeyUp">
                <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding PreviewKeyUp}"/>
            </i:EventTrigger>
            <i:EventTrigger EventName="GotFocus">
                <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding GotFocus}"/>
            </i:EventTrigger>
            <i:EventTrigger EventName="LostFocus">
                <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding LostFocus}"/>
            </i:EventTrigger>
        </i:Interaction.Triggers>
    </ctrls:ComboBox>

    <Grid x:Shared="false" x:Key="ScoreWidgetControl" Margin="{StaticResource StdMargin}" d:DataContext="{d:DesignInstance widget:vMixControlScore}">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition/>
            <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Button Margin="{StaticResource RightStdMargin}" ToolTip="{e:Localize Reset}" Style="{StaticResource TitleButton}" Command="{Binding ResetScoreCommand}">&#xF453;</Button>
        <!--Style="{StaticResource WidgetTextBox}"-->
        <toolkit:IntegerUpDown IsEnabled="{Binding IsEditable}" Style="{StaticResource WidgetIntegerUpDown}" Grid.Column="1" ext:FocusExtension.IsFocused="{Binding IsFocused}" FontWeight="Normal" Text="{Binding Value, UpdateSourceTrigger=PropertyChanged}" FormatString="{Binding FormatString}">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewKeyUp">
                    <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding PreviewKeyUp}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="GotFocus">
                    <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding GotFocus}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="LostFocus">
                    <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding LostFocus}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>
        </toolkit:IntegerUpDown>
        <ContentPresenter Grid.Column="2" Content="{Binding}">
            <ContentPresenter.ContentTemplate>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal" Margin="{StaticResource LeftStdMargin}">
                        <Button x:Name="p1" Style="{StaticResource TitleButton}" Command="{Binding AddScoreCommand}" Visibility="Visible">+1
                            <Button.Tag>
                                <sys:Int32>1</sys:Int32>
                            </Button.Tag>
                            <Button.CommandParameter>
                                <MultiBinding Converter="{c:TextFieldAndIntToControlIntParameterConverter}">
                                    <Binding/>
                                    <Binding RelativeSource="{RelativeSource Self}" Path="Tag"/>
                                </MultiBinding>
                            </Button.CommandParameter>
                        </Button>
                        <Button x:Name="p2" Style="{StaticResource TitleButton}" Command="{Binding AddScoreCommand}" Visibility="Visible">+2
                            <Button.Tag>
                                <sys:Int32>2</sys:Int32>
                            </Button.Tag>
                            <Button.CommandParameter>
                                <MultiBinding Converter="{c:TextFieldAndIntToControlIntParameterConverter}">
                                    <Binding/>
                                    <Binding RelativeSource="{RelativeSource Self}" Path="Tag"/>
                                </MultiBinding>
                            </Button.CommandParameter>
                        </Button>
                        <Button x:Name="p3" Style="{StaticResource TitleButton}" Command="{Binding AddScoreCommand}" Visibility="Visible">+3
                            <Button.Tag>
                                <sys:Int32>3</sys:Int32>
                            </Button.Tag>
                            <Button.CommandParameter>
                                <MultiBinding Converter="{c:TextFieldAndIntToControlIntParameterConverter}">
                                    <Binding/>
                                    <Binding RelativeSource="{RelativeSource Self}" Path="Tag"/>
                                </MultiBinding>
                            </Button.CommandParameter>
                        </Button>
                        <Button x:Name="p4" Style="{StaticResource TitleButton}" Command="{Binding AddScoreCommand}" Visibility="Visible">+4
                            <Button.Tag>
                                <sys:Int32>4</sys:Int32>
                            </Button.Tag>
                            <Button.CommandParameter>
                                <MultiBinding Converter="{c:TextFieldAndIntToControlIntParameterConverter}">
                                    <Binding/>
                                    <Binding RelativeSource="{RelativeSource Self}" Path="Tag"/>
                                </MultiBinding>
                            </Button.CommandParameter>
                        </Button>
                        <Button x:Name="p5" Style="{StaticResource TitleButton}" Command="{Binding AddScoreCommand}" Visibility="Visible">+5
                            <Button.Tag>
                                <sys:Int32>5</sys:Int32>
                            </Button.Tag>
                            <Button.CommandParameter>
                                <MultiBinding Converter="{c:TextFieldAndIntToControlIntParameterConverter}">
                                    <Binding/>
                                    <Binding RelativeSource="{RelativeSource Self}" Path="Tag"/>
                                </MultiBinding>
                            </Button.CommandParameter>
                        </Button>
                        <Button x:Name="p6" Style="{StaticResource TitleButton}" Command="{Binding AddScoreCommand}" Visibility="Visible">+6
                            <Button.Tag>
                                <sys:Int32>6</sys:Int32>
                            </Button.Tag>
                            <Button.CommandParameter>
                                <MultiBinding Converter="{c:TextFieldAndIntToControlIntParameterConverter}">
                                    <Binding/>
                                    <Binding RelativeSource="{RelativeSource Self}" Path="Tag"/>
                                </MultiBinding>
                            </Button.CommandParameter>
                        </Button>
                        <Button x:Name="p7" Width="32" Style="{StaticResource TitleButton}" Command="{Binding AddScoreCommand}" Visibility="Visible">+10
                            <Button.Tag>
                                <sys:Int32>10</sys:Int32>
                            </Button.Tag>
                            <Button.CommandParameter>
                                <MultiBinding Converter="{c:TextFieldAndIntToControlIntParameterConverter}">
                                    <Binding/>
                                    <Binding RelativeSource="{RelativeSource Self}" Path="Tag"/>
                                </MultiBinding>
                            </Button.CommandParameter>
                        </Button>
                    </StackPanel>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding Style}" Value="Basic">
                            <Setter Property="Visibility" TargetName="p1" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="p2" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="p3" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="p4" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="p5" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="p6" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="p7" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Style}" Value="Basketball">
                            <Setter Property="Visibility" TargetName="p1" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="p2" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="p3" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="p4" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="p5" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="p6" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="p7" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Style}" Value="Rugby">
                            <Setter Property="Visibility" TargetName="p6" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="p1" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="p7" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="p4" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Style}" Value="American Football">
                            <Setter Property="Visibility" TargetName="p5" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="p7" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="p4" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Style}" Value="Custom">
                            <Setter Property="Visibility" Value="{Binding EnabledButtons, Converter={c:BitToVisibilityConverter}, ConverterParameter=0}" TargetName="p1"/>
                            <Setter Property="Visibility" Value="{Binding EnabledButtons, Converter={c:BitToVisibilityConverter}, ConverterParameter=1}" TargetName="p2"/>
                            <Setter Property="Visibility" Value="{Binding EnabledButtons, Converter={c:BitToVisibilityConverter}, ConverterParameter=2}" TargetName="p3"/>
                            <Setter Property="Visibility" Value="{Binding EnabledButtons, Converter={c:BitToVisibilityConverter}, ConverterParameter=3}" TargetName="p4"/>
                            <Setter Property="Visibility" Value="{Binding EnabledButtons, Converter={c:BitToVisibilityConverter}, ConverterParameter=4}" TargetName="p5"/>
                            <Setter Property="Visibility" Value="{Binding EnabledButtons, Converter={c:BitToVisibilityConverter}, ConverterParameter=5}" TargetName="p6"/>
                            <Setter Property="Visibility" Value="{Binding EnabledButtons, Converter={c:BitToVisibilityConverter}, ConverterParameter=6}" TargetName="p7"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </ContentPresenter.ContentTemplate>
        </ContentPresenter>
    </Grid>

    <StackPanel x:Shared="false" x:Key="ExternalDataWidgetControl" d:DataContext="{d:DesignInstance widget:vMixControlExternalData}">
        <ContentControl Content="{Binding DataProvider.CustomUI}"/>
        <Button IsEnabled="{Binding DataProvider.IsProvidingCustomProperties}" Visibility="{Binding DataProvider.IsProvidingCustomProperties, Converter={wpfc:BoolToVisibilityConverter}}" Margin="{StaticResource StdMargin}" Command="{Binding OpenPropertiesCommand}" Content="{e:Localize Properties}"></Button>
    </StackPanel>

    <Grid x:Shared="false"  x:Key="TimerWidgetControl" Margin="{StaticResource StdMargin}" d:DataContext="{d:DesignInstance widget:vMixControlTimer}">
        <Grid.RowDefinitions>
            <RowDefinition/>
            <RowDefinition Height="2"/>
            <RowDefinition/>
            <RowDefinition Height="2"/>
            <RowDefinition/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition/>
            <ColumnDefinition/>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>
        <skin:PropertiesListView Grid.ColumnSpan="3">
            <CompositeCollection>
                <toolkit:TimeSpanUpDown FractionalSecondsDigitsCount="{Binding IsHighPrecision}" Tag="Default Time" FontWeight="Normal" Style="{StaticResource WidgetTimeSpanUpDown}" Grid.Row="2" IsEnabled="{Binding Active, Converter={wpfc:BoolToInverseBoolConverter}}" ext:FocusExtension.IsFocused="{Binding IsFocused}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="PreviewKeyUp">
                            <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding PreviewKeyUp}"/>
                        </i:EventTrigger>
                        <i:EventTrigger EventName="GotFocus">
                            <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding GotFocus}"/>
                        </i:EventTrigger>
                        <i:EventTrigger EventName="LostFocus">
                            <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding LostFocus}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                    <toolkit:TimeSpanUpDown.Minimum>
                        <sys:TimeSpan>0</sys:TimeSpan>
                    </toolkit:TimeSpanUpDown.Minimum>
                    <toolkit:TimeSpanUpDown.Value>
                        <Binding Path="DefaultTime" Mode="TwoWay"/>
                    </toolkit:TimeSpanUpDown.Value>
                </toolkit:TimeSpanUpDown>
                <Grid IsEnabled="{Binding IsEditable}" Tag="Current Time" Grid.Row="2" Grid.Column="1">
                    <toolkit:TimeSpanUpDown FractionalSecondsDigitsCount="{Binding IsHighPrecision}" Style="{StaticResource WidgetTimeSpanUpDown}" FontWeight="Normal" IsEnabled="{Binding Active, Converter={wpfc:BoolToInverseBoolConverter}}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewKeyUp">
                                <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding PreviewKeyUp}"/>
                            </i:EventTrigger>
                            <i:EventTrigger EventName="GotFocus">
                                <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding GotFocus}"/>
                            </i:EventTrigger>
                            <i:EventTrigger EventName="LostFocus">
                                <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding LostFocus}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <toolkit:TimeSpanUpDown.Minimum>
                            <sys:TimeSpan>0</sys:TimeSpan>
                        </toolkit:TimeSpanUpDown.Minimum>
                        <toolkit:TimeSpanUpDown.Value>
                            <Binding Path="Time" Mode="TwoWay"/>
                        </toolkit:TimeSpanUpDown.Value>
                    </toolkit:TimeSpanUpDown>
                </Grid>
                <CheckBox Tag="Reverse" Grid.Row="2" Grid.Column="2" Margin="{StaticResource LeftStdMargin}" IsChecked="{Binding Reverse, Mode=TwoWay}" IsEnabled="{Binding Active, Converter={wpfc:BoolToInverseBoolConverter}}" HorizontalAlignment="Left"/>
            </CompositeCollection>
        </skin:PropertiesListView>
        <StackPanel Orientation="Horizontal" Grid.ColumnSpan="3" Grid.Row="4">
            <Button Command="{Binding TimerCommand}" CommandParameter="Start" Style="{StaticResource TitleButton}" IsEnabled="{Binding Active, Converter={wpfc:BoolToInverseBoolConverter}}" ToolTip="Start">&#xF40A;</Button>
            <Button Command="{Binding TimerCommand}" IsEnabled="{Binding Active}" CommandParameter="Pause" Style="{StaticResource TitleButton}" ToolTip="Pause">&#xF3E4;</Button>
            <Button Command="{Binding TimerCommand}" CommandParameter="Stop" Style="{StaticResource TitleButton}" ToolTip="Stop/Reset">&#xF4DB;</Button>
            <Border BorderBrush="White" Margin="{StaticResource LeftRightStdMargin}" BorderThickness="1,0,0,0"/>
            <Button Width="24" Margin="1" HorizontalContentAlignment="Center" ToolTip="{e:Localize -1 Hour}" Command="{Binding TimerCommand}" CommandParameter="-1 Hour" Content="{e:Localize -H}"></Button>
            <Button Width="24" Margin="1" HorizontalContentAlignment="Center" ToolTip="{e:Localize -1 Minute}" Command="{Binding TimerCommand}" CommandParameter="-1 Minute" Content="{e:Localize -M}"></Button>
            <Button Width="24" Margin="1" HorizontalContentAlignment="Center" ToolTip="{e:Localize -1 Second}" Command="{Binding TimerCommand}" CommandParameter="-1 Second" Content="{e:Localize -S}"></Button>
            <Border BorderBrush="White" Margin="{StaticResource LeftRightStdMargin}" BorderThickness="1,0,0,0"/>
            <Button Width="24" Margin="1" HorizontalContentAlignment="Center" ToolTip="{e:Localize +1 Hour}" Command="{Binding TimerCommand}" CommandParameter="+1 Hour" Content="{e:Localize +H}"></Button>
            <Button Width="24" Margin="1" HorizontalContentAlignment="Center" ToolTip="{e:Localize +1 Minute}" Command="{Binding TimerCommand}" CommandParameter="+1 Minute" Content="{e:Localize +M}"></Button>
            <Button Width="24" Margin="1" HorizontalContentAlignment="Center" ToolTip="{e:Localize +1 Second}" Command="{Binding TimerCommand}" CommandParameter="+1 Second" Content="{e:Localize +S}"></Button>
        </StackPanel>
    </Grid>

    <!--Inner Controls End-->
    <DataTemplate x:Key="Dummy"/>

    <DataTemplate x:Key="vMixControlButton" DataType="widget:vMixControlButton">
        <ctrls:vMixControlContainerDummy BorderColorProxy="{Binding BlinkBorderColor}" Control="{Binding}" ScaleUpCommand="{Binding Main.ScaleUpCommand, Source={StaticResource Locator}}" ScaleDownCommand="{Binding Main.ScaleDownCommand, Source={StaticResource Locator}}" CopyCommand="{Binding Main.CopyWidgetCommand, Source={StaticResource Locator}}" CloseCommand="{Binding Main.RemoveWidgetCommand, Source={StaticResource Locator}}" SettingsCommand="{Binding Main.OpenPropertiesCommand, Source={StaticResource Locator}}" ToggleCaptionCommand="{Binding Main.ToggleCaptionCommand, Source={StaticResource Locator}}" SwitchPasswordLockableCommand="{Binding Main.SwitchPasswordLockableCommand, Source={StaticResource Locator}}"
                                         MoveCommand="{Binding Main.MoveWidgetCommand, Source={StaticResource Locator}}">
            <ctrls:vMixControlContainerDummy.CaptionContent>
                <StackPanel Orientation="Horizontal">
                    <Ellipse x:Name="hasErrors" Width="4" Height="4" Margin="{StaticResource RightStdMargin}"/>
                    <Button ToolTip="{e:Localize Stop script}" Style="{StaticResource TitleButton}" HorizontalAlignment="Left" Command="{Binding StopScriptCommand}" IsEnabled="{Binding Enabled, Converter={wpfc:BoolToInverseBoolConverter}, Mode=OneWay}">&#xF4DB;</Button>
                </StackPanel>
            </ctrls:vMixControlContainerDummy.CaptionContent>
            <ctrls:vMixControlContainerDummy.MainContent>
                <ContentControl Content="{StaticResource ButtonWidgetControl}"/>
            </ctrls:vMixControlContainerDummy.MainContent>
        </ctrls:vMixControlContainerDummy>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding HasScriptErrors}" Value="False">
                <Setter Property="Fill" TargetName="hasErrors" Value="Lime"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding HasScriptErrors}" Value="True">
                <Setter Property="Fill" TargetName="hasErrors" Value="Red"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="vMixControlTextField" DataType="widget:vMixControlTextField">
        <ctrls:vMixControlContainerDummy Caption="{Binding Name}" BorderColorProxy="{Binding BorderColor}" Control="{Binding}" ScaleUpCommand="{Binding Main.ScaleUpCommand, Source={StaticResource Locator}}" ScaleDownCommand="{Binding Main.ScaleDownCommand, Source={StaticResource Locator}}" CopyCommand="{Binding Main.CopyWidgetCommand, Source={StaticResource Locator}}" CloseCommand="{Binding Main.RemoveWidgetCommand, Source={StaticResource Locator}}" SettingsCommand="{Binding Main.OpenPropertiesCommand, Source={StaticResource Locator}}" ToggleCaptionCommand="{Binding Main.ToggleCaptionCommand, Source={StaticResource Locator}}" SwitchPasswordLockableCommand="{Binding Main.SwitchPasswordLockableCommand, Source={StaticResource Locator}}"
                                         MoveCommand="{Binding Main.MoveWidgetCommand, Source={StaticResource Locator}}">
            <ctrls:vMixControlContainerDummy.MainContent>
                <ContentControl Content="{StaticResource TextFieldWidgetControl}"/>
            </ctrls:vMixControlContainerDummy.MainContent>
        </ctrls:vMixControlContainerDummy>
    </DataTemplate>


    <DataTemplate x:Key="vMixControlList" DataType="widget:vMixControlList">
        <ctrls:vMixControlContainerDummy Caption="{Binding Name}" BorderColorProxy="{Binding BorderColor}" Control="{Binding}" ScaleUpCommand="{Binding Main.ScaleUpCommand, Source={StaticResource Locator}}" ScaleDownCommand="{Binding Main.ScaleDownCommand, Source={StaticResource Locator}}" CopyCommand="{Binding Main.CopyWidgetCommand, Source={StaticResource Locator}}" CloseCommand="{Binding Main.RemoveWidgetCommand, Source={StaticResource Locator}}" SettingsCommand="{Binding Main.OpenPropertiesCommand, Source={StaticResource Locator}}" ToggleCaptionCommand="{Binding Main.ToggleCaptionCommand, Source={StaticResource Locator}}" SwitchPasswordLockableCommand="{Binding Main.SwitchPasswordLockableCommand, Source={StaticResource Locator}}"
                                         MoveCommand="{Binding Main.MoveWidgetCommand, Source={StaticResource Locator}}">
            <ctrls:vMixControlContainerDummy.MainContent>
                <ContentControl Content="{StaticResource ListWidgetControl}"/>
            </ctrls:vMixControlContainerDummy.MainContent>
        </ctrls:vMixControlContainerDummy>
    </DataTemplate>

    <DataTemplate x:Key="vMixControlPlaylist" DataType="widget:vMixControlPlaylist">
        <ctrls:vMixControlContainerDummy Caption="{Binding Name}" BorderColorProxy="{Binding BorderColor}" Control="{Binding}" ScaleUpCommand="{Binding Main.ScaleUpCommand, Source={StaticResource Locator}}" ScaleDownCommand="{Binding Main.ScaleDownCommand, Source={StaticResource Locator}}" CopyCommand="{Binding Main.CopyWidgetCommand, Source={StaticResource Locator}}" CloseCommand="{Binding Main.RemoveWidgetCommand, Source={StaticResource Locator}}" SettingsCommand="{Binding Main.OpenPropertiesCommand, Source={StaticResource Locator}}" ToggleCaptionCommand="{Binding Main.ToggleCaptionCommand, Source={StaticResource Locator}}" SwitchPasswordLockableCommand="{Binding Main.SwitchPasswordLockableCommand, Source={StaticResource Locator}}"
                                         MoveCommand="{Binding Main.MoveWidgetCommand, Source={StaticResource Locator}}">
            <ctrls:vMixControlContainerDummy.MainContent>
                <Grid Height="{Binding Height}">
                    <ContentControl Content="{StaticResource PlayListWidgetControl}"/>
                    <ctrls:vMixControlResizeThumb IsEnabled="{Binding Locked, Converter={wpfc:BoolToInverseBoolConverter}}" Margin="0,4,0,-4"  Height="4" Cursor="SizeNS" DataContext="{Binding}" VerticalAlignment="Bottom">
                        <ctrls:vMixControlResizeThumb.Template>
                            <ControlTemplate TargetType="{x:Type ctrls:vMixControlResizeThumb}">
                                <Rectangle Fill="Transparent"/>
                            </ControlTemplate>
                        </ctrls:vMixControlResizeThumb.Template>
                    </ctrls:vMixControlResizeThumb>
                </Grid>
            </ctrls:vMixControlContainerDummy.MainContent>
        </ctrls:vMixControlContainerDummy>
    </DataTemplate>

    <DataTemplate x:Key="vMixControlScore" DataType="widget:vMixControlScore">
        <ctrls:vMixControlContainerDummy Caption="{Binding Name}" BorderColorProxy="{Binding BorderColor}" Control="{Binding}" ScaleUpCommand="{Binding Main.ScaleUpCommand, Source={StaticResource Locator}}" ScaleDownCommand="{Binding Main.ScaleDownCommand, Source={StaticResource Locator}}" CopyCommand="{Binding Main.CopyWidgetCommand, Source={StaticResource Locator}}" CloseCommand="{Binding Main.RemoveWidgetCommand, Source={StaticResource Locator}}" SettingsCommand="{Binding Main.OpenPropertiesCommand, Source={StaticResource Locator}}" ToggleCaptionCommand="{Binding Main.ToggleCaptionCommand, Source={StaticResource Locator}}" SwitchPasswordLockableCommand="{Binding Main.SwitchPasswordLockableCommand, Source={StaticResource Locator}}"
                                         MoveCommand="{Binding Main.MoveWidgetCommand, Source={StaticResource Locator}}">
            <ctrls:vMixControlContainerDummy.MainContent>
                <ContentControl Content="{StaticResource ScoreWidgetControl}"/>
            </ctrls:vMixControlContainerDummy.MainContent>
        </ctrls:vMixControlContainerDummy>
    </DataTemplate>
    <DataTemplate x:Key="vMixControlVolume" DataType="widget:vMixControlVolume">
        <ctrls:vMixControlContainerDummy Caption="{Binding Name}" BorderColorProxy="{Binding BorderColor}" Control="{Binding}" ScaleUpCommand="{Binding Main.ScaleUpCommand, Source={StaticResource Locator}}" ScaleDownCommand="{Binding Main.ScaleDownCommand, Source={StaticResource Locator}}" CopyCommand="{Binding Main.CopyWidgetCommand, Source={StaticResource Locator}}" CloseCommand="{Binding Main.RemoveWidgetCommand, Source={StaticResource Locator}}" SettingsCommand="{Binding Main.OpenPropertiesCommand, Source={StaticResource Locator}}" ToggleCaptionCommand="{Binding Main.ToggleCaptionCommand, Source={StaticResource Locator}}" SwitchPasswordLockableCommand="{Binding Main.SwitchPasswordLockableCommand, Source={StaticResource Locator}}"
                                         MoveCommand="{Binding Main.MoveWidgetCommand, Source={StaticResource Locator}}">
            <ctrls:vMixControlContainerDummy.MainContent>
                <Grid Height="{Binding Height}">
                    <ContentControl Content="{StaticResource VolumeWidgetControl}"/>
                    <ctrls:vMixControlResizeThumb IsEnabled="{Binding Locked, Converter={wpfc:BoolToInverseBoolConverter}}" Margin="0,4,0,-4"  Height="4" Cursor="SizeNS" DataContext="{Binding}" VerticalAlignment="Bottom">
                        <ctrls:vMixControlResizeThumb.Template>
                            <ControlTemplate TargetType="{x:Type ctrls:vMixControlResizeThumb}">
                                <Rectangle Fill="Transparent"/>
                            </ControlTemplate>
                        </ctrls:vMixControlResizeThumb.Template>
                    </ctrls:vMixControlResizeThumb>
                </Grid>
            </ctrls:vMixControlContainerDummy.MainContent>
        </ctrls:vMixControlContainerDummy>
    </DataTemplate>

    <!--Backwards compatibility-->
    <DataTemplate x:Key="vMixControlSlider" DataType="widget:vMixControlSlider">
        <ctrls:vMixControlContainerDummy Caption="{Binding Name}" BorderColorProxy="{Binding BorderColor}" Control="{Binding}" ScaleUpCommand="{Binding Main.ScaleUpCommand, Source={StaticResource Locator}}" ScaleDownCommand="{Binding Main.ScaleDownCommand, Source={StaticResource Locator}}" CopyCommand="{Binding Main.CopyWidgetCommand, Source={StaticResource Locator}}" CloseCommand="{Binding Main.RemoveWidgetCommand, Source={StaticResource Locator}}" SettingsCommand="{Binding Main.OpenPropertiesCommand, Source={StaticResource Locator}}" ToggleCaptionCommand="{Binding Main.ToggleCaptionCommand, Source={StaticResource Locator}}" SwitchPasswordLockableCommand="{Binding Main.SwitchPasswordLockableCommand, Source={StaticResource Locator}}"
                                         MoveCommand="{Binding Main.MoveWidgetCommand, Source={StaticResource Locator}}">
            <ctrls:vMixControlContainerDummy.MainContent>
                <Grid Height="{Binding Height}">
                    <ContentControl Content="{StaticResource VolumeWidgetControl}"/>
                    <ctrls:vMixControlResizeThumb IsEnabled="{Binding Locked, Converter={wpfc:BoolToInverseBoolConverter}}" Margin="0,4,0,-4"  Height="4" Cursor="SizeNS" DataContext="{Binding}" VerticalAlignment="Bottom">
                        <ctrls:vMixControlResizeThumb.Template>
                            <ControlTemplate TargetType="{x:Type ctrls:vMixControlResizeThumb}">
                                <Rectangle Fill="Transparent"/>
                            </ControlTemplate>
                        </ctrls:vMixControlResizeThumb.Template>
                    </ctrls:vMixControlResizeThumb>
                </Grid>
            </ctrls:vMixControlContainerDummy.MainContent>
        </ctrls:vMixControlContainerDummy>
    </DataTemplate>


    <DataTemplate x:Key="vMixControlTBar" DataType="widget:vMixControlTBar">
        <ctrls:vMixControlContainerDummy Caption="{Binding Name}" BorderColorProxy="{Binding BorderColor}" Control="{Binding}" ScaleUpCommand="{Binding Main.ScaleUpCommand, Source={StaticResource Locator}}" ScaleDownCommand="{Binding Main.ScaleDownCommand, Source={StaticResource Locator}}" CopyCommand="{Binding Main.CopyWidgetCommand, Source={StaticResource Locator}}" CloseCommand="{Binding Main.RemoveWidgetCommand, Source={StaticResource Locator}}" SettingsCommand="{Binding Main.OpenPropertiesCommand, Source={StaticResource Locator}}" ToggleCaptionCommand="{Binding Main.ToggleCaptionCommand, Source={StaticResource Locator}}" SwitchPasswordLockableCommand="{Binding Main.SwitchPasswordLockableCommand, Source={StaticResource Locator}}"
                                         MoveCommand="{Binding Main.MoveWidgetCommand, Source={StaticResource Locator}}">
            <ctrls:vMixControlContainerDummy.MainContent>
                <Grid Height="{Binding Height}">
                    <ContentControl Content="{StaticResource TBarWidgetControl}"/>
                    <ctrls:vMixControlResizeThumb IsEnabled="{Binding Locked, Converter={wpfc:BoolToInverseBoolConverter}}" Margin="0,4,0,-4"  Height="4" Cursor="SizeNS" DataContext="{Binding}" VerticalAlignment="Bottom">
                        <ctrls:vMixControlResizeThumb.Template>
                            <ControlTemplate TargetType="{x:Type ctrls:vMixControlResizeThumb}">
                                <Rectangle Fill="Transparent"/>
                            </ControlTemplate>
                        </ctrls:vMixControlResizeThumb.Template>
                    </ctrls:vMixControlResizeThumb>
                </Grid>
            </ctrls:vMixControlContainerDummy.MainContent>
        </ctrls:vMixControlContainerDummy>
    </DataTemplate>

    <DataTemplate x:Key="vMixControlLabel" DataType="widget:vMixControlLabel">
        <ctrls:vMixControlContainerDummy Caption="{Binding Name}" BorderColorProxy="{Binding BorderColor}" Control="{Binding}" ScaleUpCommand="{Binding Main.ScaleUpCommand, Source={StaticResource Locator}}" ScaleDownCommand="{Binding Main.ScaleDownCommand, Source={StaticResource Locator}}" CopyCommand="{Binding Main.CopyWidgetCommand, Source={StaticResource Locator}}" CloseCommand="{Binding Main.RemoveWidgetCommand, Source={StaticResource Locator}}" SettingsCommand="{Binding Main.OpenPropertiesCommand, Source={StaticResource Locator}}" ToggleCaptionCommand="{Binding Main.ToggleCaptionCommand, Source={StaticResource Locator}}" SwitchPasswordLockableCommand="{Binding Main.SwitchPasswordLockableCommand, Source={StaticResource Locator}}"
                                         MoveCommand="{Binding Main.MoveWidgetCommand, Source={StaticResource Locator}}">
        </ctrls:vMixControlContainerDummy>
    </DataTemplate>

    <DataTemplate x:Key="vMixControlRegion" DataType="widget:vMixControlRegion">
        <ctrls:vMixControlContainerDummy Caption="{Binding Name}" BorderColorProxy="{Binding BorderColor}" Control="{Binding}" ScaleUpCommand="{Binding Main.ScaleUpCommand, Source={StaticResource Locator}}" ScaleDownCommand="{Binding Main.ScaleDownCommand, Source={StaticResource Locator}}" CopyCommand="{Binding Main.CopyWidgetCommand, Source={StaticResource Locator}}" CloseCommand="{Binding Main.RemoveWidgetCommand, Source={StaticResource Locator}}" SettingsCommand="{Binding Main.OpenPropertiesCommand, Source={StaticResource Locator}}" ToggleCaptionCommand="{Binding Main.ToggleCaptionCommand, Source={StaticResource Locator}}" SwitchPasswordLockableCommand="{Binding Main.SwitchPasswordLockableCommand, Source={StaticResource Locator}}"
                                         MoveCommand="{Binding Main.MoveWidgetCommand, Source={StaticResource Locator}}">
            <ctrls:vMixControlContainerDummy.CaptionContent>
                <StackPanel Orientation="Horizontal">
                    <CheckBox ToolTip="{e:Localize Sticky}" HorizontalAlignment="Left" VerticalContentAlignment="Center" IsChecked="{Binding Sticky}" IsEnabled="True">
                        <CheckBox.Style>
                            <Style TargetType="CheckBox">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="CheckBox">
                                            <Border x:Name="border" Background="{StaticResource Button.Static.Background}" BorderBrush="{StaticResource Button.Static.Border}" BorderThickness="1" Width="19" Height="19">
                                                <TextBlock FontSize="{TemplateBinding FontSize}" FontWeight="Regular" x:Name="textBox" FontFamily="/vMixControllerSkin;Component/#FontAwesome" Foreground="{StaticResource ComboBox.Static.Glyph}" Text="&#xF24A;" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Background" Value="{StaticResource Button.MouseOver.Background}" TargetName="border"/>
                                                    <Setter Property="BorderBrush" Value="{StaticResource Button.MouseOver.Border}" TargetName="border"/>
                                                    <Setter Property="Cursor" Value="Hand"/>
                                                </Trigger>
                                                <Trigger Property="IsChecked" Value="True">
                                                    <Setter Property="Foreground" Value="Yellow" TargetName="textBox"/>
                                                    <Setter Property="Text" Value="&#xF249;" TargetName="textBox"/>
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </CheckBox.Style>
                    </CheckBox>
                </StackPanel>
            </ctrls:vMixControlContainerDummy.CaptionContent>

            <ctrls:vMixControlContainerDummy.MainContent>
                <Grid Height="{Binding Height}">
                    <!--<i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseLeftButtonUp">
                            <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding MouseDoubleClick}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>-->
                    <Grid.Background>
                        <SolidColorBrush Color="{Binding BorderColor}"/>
                    </Grid.Background>
                    
                    <TextBox IsHitTestVisible="{Binding IsEditable}" IsReadOnly="{Binding IsEditable, Converter={wpfc:BoolToInverseBoolConverter}}" IsReadOnlyCaretVisible="False" FontWeight="Normal" Margin="{StaticResource StdMargin}" Text="{Binding Text}" Foreground="{Binding BorderColor, Converter={c:ColorToBlackOrWhiteConverter}}" TextWrapping="Wrap" Background="Transparent" BorderBrush="Transparent" BorderThickness="0"/>
                    
                    <ctrls:vMixControlResizeThumb IsEnabled="{Binding Locked, Converter={wpfc:BoolToInverseBoolConverter}}" Margin="0,4,0,-4"  Height="4" Cursor="SizeNS" DataContext="{Binding}" VerticalAlignment="Bottom">
                        <ctrls:vMixControlResizeThumb.Template>
                            <ControlTemplate TargetType="{x:Type ctrls:vMixControlResizeThumb}">
                                <Rectangle Fill="Transparent"/>
                            </ControlTemplate>
                        </ctrls:vMixControlResizeThumb.Template>
                    </ctrls:vMixControlResizeThumb>
                </Grid>
            </ctrls:vMixControlContainerDummy.MainContent>
        </ctrls:vMixControlContainerDummy>
    </DataTemplate>

    <DataTemplate x:Key="vMixControlMidiInterface" DataType="widget:vMixControlMidiInterface">
        <ctrls:vMixControlContainerDummy Caption="{Binding Name}" BorderColorProxy="{Binding BorderColor}" Control="{Binding}" ScaleUpCommand="{Binding Main.ScaleUpCommand, Source={StaticResource Locator}}" ScaleDownCommand="{Binding Main.ScaleDownCommand, Source={StaticResource Locator}}" CopyCommand="{Binding Main.CopyWidgetCommand, Source={StaticResource Locator}}" CloseCommand="{Binding Main.RemoveWidgetCommand, Source={StaticResource Locator}}" SettingsCommand="{Binding Main.OpenPropertiesCommand, Source={StaticResource Locator}}" ToggleCaptionCommand="{Binding Main.ToggleCaptionCommand, Source={StaticResource Locator}}" SwitchPasswordLockableCommand="{Binding Main.SwitchPasswordLockableCommand, Source={StaticResource Locator}}"
                                         MoveCommand="{Binding Main.MoveWidgetCommand, Source={StaticResource Locator}}">
            <ctrls:vMixControlContainerDummy.MainContent>
                <Label HorizontalAlignment="Center" Content="{Binding DeviceCaps}"/>
            </ctrls:vMixControlContainerDummy.MainContent>
        </ctrls:vMixControlContainerDummy>
    </DataTemplate>

    <DataTemplate x:Key="vMixControlExternalData" DataType="widget:vMixControlExternalData">
        <ctrls:vMixControlContainerDummy Caption="{Binding Name}" BorderColorProxy="{Binding BorderColor}" Control="{Binding}" ScaleUpCommand="{Binding Main.ScaleUpCommand, Source={StaticResource Locator}}" ScaleDownCommand="{Binding Main.ScaleDownCommand, Source={StaticResource Locator}}" CopyCommand="{Binding Main.CopyWidgetCommand, Source={StaticResource Locator}}" CloseCommand="{Binding Main.RemoveWidgetCommand, Source={StaticResource Locator}}" SettingsCommand="{Binding Main.OpenPropertiesCommand, Source={StaticResource Locator}}" ToggleCaptionCommand="{Binding Main.ToggleCaptionCommand, Source={StaticResource Locator}}" SwitchPasswordLockableCommand="{Binding Main.SwitchPasswordLockableCommand, Source={StaticResource Locator}}"
                                         MoveCommand="{Binding Main.MoveWidgetCommand, Source={StaticResource Locator}}">
            <ctrls:vMixControlContainerDummy.CaptionContent>
                <StackPanel Orientation="Horizontal">
                    <Button ToolTip="{e:Localize Toggle enabled}" Style="{StaticResource TitleButton}" HorizontalAlignment="Left" Command="{Binding ToggleEnabledCommand}" IsEnabled="True">&#xF2D1;</Button>
                </StackPanel>
            </ctrls:vMixControlContainerDummy.CaptionContent>
            <ctrls:vMixControlContainerDummy.MainContent>
                <ContentControl IsEnabled="{Binding Enabled}" Content="{StaticResource ExternalDataWidgetControl}"/>
            </ctrls:vMixControlContainerDummy.MainContent>
        </ctrls:vMixControlContainerDummy>
    </DataTemplate>

    <DataTemplate x:Key="vMixControlTimer" DataType="widget:vMixControlTimer">
        <ctrls:vMixControlContainerDummy Caption="{Binding Name}" BorderColorProxy="{Binding BorderColor}" Control="{Binding}" ScaleUpCommand="{Binding Main.ScaleUpCommand, Source={StaticResource Locator}}" ScaleDownCommand="{Binding Main.ScaleDownCommand, Source={StaticResource Locator}}" CopyCommand="{Binding Main.CopyWidgetCommand, Source={StaticResource Locator}}" CloseCommand="{Binding Main.RemoveWidgetCommand, Source={StaticResource Locator}}" SettingsCommand="{Binding Main.OpenPropertiesCommand, Source={StaticResource Locator}}" ToggleCaptionCommand="{Binding Main.ToggleCaptionCommand, Source={StaticResource Locator}}" SwitchPasswordLockableCommand="{Binding Main.SwitchPasswordLockableCommand, Source={StaticResource Locator}}"
                                         MoveCommand="{Binding Main.MoveWidgetCommand, Source={StaticResource Locator}}">
            <ctrls:vMixControlContainerDummy.MainContent>
                <ContentControl Content="{StaticResource TimerWidgetControl}"/>
            </ctrls:vMixControlContainerDummy.MainContent>
        </ctrls:vMixControlContainerDummy>
    </DataTemplate>

    <DataTemplate x:Key="vMixControlContainer" DataType="widget:vMixControlContainer">
        <ctrls:vMixControlContainerDummy Caption="{Binding Name}" BorderColorProxy="{Binding BorderColor}" Control="{Binding}" ScaleUpCommand="{Binding Main.ScaleUpCommand, Source={StaticResource Locator}}" ScaleDownCommand="{Binding Main.ScaleDownCommand, Source={StaticResource Locator}}" CopyCommand="{Binding Main.CopyWidgetCommand, Source={StaticResource Locator}}" CloseCommand="{Binding Main.RemoveWidgetCommand, Source={StaticResource Locator}}" SettingsCommand="{Binding Main.OpenPropertiesCommand, Source={StaticResource Locator}}" ToggleCaptionCommand="{Binding Main.ToggleCaptionCommand, Source={StaticResource Locator}}" SwitchPasswordLockableCommand="{Binding Main.SwitchPasswordLockableCommand, Source={StaticResource Locator}}"
                                         MoveCommand="{Binding Main.MoveWidgetCommand, Source={StaticResource Locator}}">
            <ctrls:vMixControlContainerDummy.MainContent>
                <ItemsControl ItemsSource="{Binding Controls}" HorizontalContentAlignment="Stretch">
                    <!--<ItemsControl.Resources>
                        <ResourceDictionary>
                            <ResourceDictionary.MergedDictionaries>
                                <ResourceDictionary Source="/vMixController;component/Skins/ControlTemplates.xaml"/>
                            </ResourceDictionary.MergedDictionaries>
                        </ResourceDictionary>
                    </ItemsControl.Resources>-->
                    <ItemsControl.ItemTemplateSelector>
                        <ctrls:TypeTemplateSelector/>
                    </ItemsControl.ItemTemplateSelector>
                </ItemsControl>
            </ctrls:vMixControlContainerDummy.MainContent>
        </ctrls:vMixControlContainerDummy>
    </DataTemplate>

    <DataTemplate x:Key="vMixControlMultiState" DataType="widget:vMixControlMultiState">
        <ctrls:vMixControlContainerDummy Caption="{Binding Name}" BorderColorProxy="{Binding BorderColor}" Control="{Binding}" ScaleUpCommand="{Binding Main.ScaleUpCommand, Source={StaticResource Locator}}" ScaleDownCommand="{Binding Main.ScaleDownCommand, Source={StaticResource Locator}}" CopyCommand="{Binding Main.CopyWidgetCommand, Source={StaticResource Locator}}" CloseCommand="{Binding Main.RemoveWidgetCommand, Source={StaticResource Locator}}" SettingsCommand="{Binding Main.OpenPropertiesCommand, Source={StaticResource Locator}}" ToggleCaptionCommand="{Binding Main.ToggleCaptionCommand, Source={StaticResource Locator}}" SwitchPasswordLockableCommand="{Binding Main.SwitchPasswordLockableCommand, Source={StaticResource Locator}}"
                                         MoveCommand="{Binding Main.MoveWidgetCommand, Source={StaticResource Locator}}">
            <ctrls:vMixControlContainerDummy.CaptionContent>
                <StackPanel Orientation="Horizontal">
                    <Button ToolTip="{e:Localize Toggle enabled}" Style="{StaticResource TitleButton}" HorizontalAlignment="Left" Command="{Binding ToggleEnabledCommand}" IsEnabled="True">&#xF2D1;</Button>
                </StackPanel>
            </ctrls:vMixControlContainerDummy.CaptionContent>
            <ctrls:vMixControlContainerDummy.MainContent>
                <TextBlock IsEnabled="{Binding Enabled}" HorizontalAlignment="Center" Style="{StaticResource PropertyName}" Text="{e:Localize Multi State}"></TextBlock>
            </ctrls:vMixControlContainerDummy.MainContent>
        </ctrls:vMixControlContainerDummy>
    </DataTemplate>

    <DataTemplate x:Key="vMixControlClock" DataType="widget:vMixControlClock">
        <ctrls:vMixControlContainerDummy Caption="{Binding Name}" BorderColorProxy="{Binding BorderColor}" Control="{Binding}" ScaleUpCommand="{Binding Main.ScaleUpCommand, Source={StaticResource Locator}}" ScaleDownCommand="{Binding Main.ScaleDownCommand, Source={StaticResource Locator}}" CopyCommand="{Binding Main.CopyWidgetCommand, Source={StaticResource Locator}}" CloseCommand="{Binding Main.RemoveWidgetCommand, Source={StaticResource Locator}}" SettingsCommand="{Binding Main.OpenPropertiesCommand, Source={StaticResource Locator}}" ToggleCaptionCommand="{Binding Main.ToggleCaptionCommand, Source={StaticResource Locator}}" SwitchPasswordLockableCommand="{Binding Main.SwitchPasswordLockableCommand, Source={StaticResource Locator}}"
                                         MoveCommand="{Binding Main.MoveWidgetCommand, Source={StaticResource Locator}}">
            <ctrls:vMixControlContainerDummy.MainContent>
                <TextBlock Style="{StaticResource PropertyName}"><Run Text="{Binding NextEventAt}"/></TextBlock>
            </ctrls:vMixControlContainerDummy.MainContent>
        </ctrls:vMixControlContainerDummy>
    </DataTemplate>

    <DataTemplate x:Key="vMixControlTimecode">
        <ctrls:vMixControlContainerDummy Caption="{Binding Name}" BorderColorProxy="{Binding BorderColor}" Control="{Binding}" ScaleUpCommand="{Binding Main.ScaleUpCommand, Source={StaticResource Locator}}" ScaleDownCommand="{Binding Main.ScaleDownCommand, Source={StaticResource Locator}}" CopyCommand="{Binding Main.CopyWidgetCommand, Source={StaticResource Locator}}" CloseCommand="{Binding Main.RemoveWidgetCommand, Source={StaticResource Locator}}" SettingsCommand="{Binding Main.OpenPropertiesCommand, Source={StaticResource Locator}}" ToggleCaptionCommand="{Binding Main.ToggleCaptionCommand, Source={StaticResource Locator}}" SwitchPasswordLockableCommand="{Binding Main.SwitchPasswordLockableCommand, Source={StaticResource Locator}}"
                                         MoveCommand="{Binding Main.MoveWidgetCommand, Source={StaticResource Locator}}">
            <ctrls:vMixControlContainerDummy.MainContent>
                <TextBlock Style="{StaticResource PropertyName}"><Run Text="{Binding NextEventAt}"/></TextBlock>
            </ctrls:vMixControlContainerDummy.MainContent>
        </ctrls:vMixControlContainerDummy>
    </DataTemplate>
</ResourceDictionary>